# UltraMCP con Supabase Integrado - Sin conflictos de puertos
version: '3.8'

services:
  # Redis para cache (puerto diferente para evitar conflictos)
  ultramcp-redis:
    image: redis:7-alpine
    container_name: ultramcp-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure}
    volumes:
      - redis_hybrid_data:/data
    ports:
      - "6380:6379"  # Puerto diferente para evitar conflictos
    networks:
      - ultramcp-hybrid
    restart: unless-stopped

  # Qdrant Vector Database
  ultramcp-qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: ultramcp-qdrant
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    volumes:
      - qdrant_hybrid_data:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"
    networks:
      - ultramcp-hybrid
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Terminal Frontend (puerto 5173)
  ultramcp-terminal:
    build:
      context: .
      dockerfile: Dockerfile.frontend.production
    container_name: ultramcp-terminal
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=http://localhost:3001
      - VITE_WS_BASE_URL=ws://localhost:3001
    ports:
      - "5173:80"
    networks:
      - ultramcp-hybrid
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway Backend (puerto 3001)
  ultramcp-dashboard:
    build:
      context: .
      dockerfile: Dockerfile.backend.production
    container_name: ultramcp-dashboard
    environment:
      - NODE_ENV=production
      - PORT=3001
      # Usar Supabase local en lugar de PostgreSQL separado
      - DATABASE_URL=postgresql://postgres:YlGjsCtc73hQIJHTLsIRPiIKS8mTVPCryRMolyRqjFU=@host.docker.internal:5432/postgres
      - SUPABASE_URL=http://host.docker.internal:8000
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - REDIS_URL=redis://:redis_secure@ultramcp-redis:6379
      - QDRANT_URL=http://ultramcp-qdrant:6333
    ports:
      - "3001:3001"
    networks:
      - ultramcp-hybrid
    depends_on:
      - ultramcp-redis
      - ultramcp-qdrant
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # LangGraph Studio (puerto 8123)
  ultramcp-studio:
    build:
      context: ./services/langgraph-studio
      dockerfile: Dockerfile
    container_name: ultramcp-studio
    environment:
      - PYTHONPATH=/app
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://postgres:YlGjsCtc73hQIJHTLsIRPiIKS8mTVPCryRMolyRqjFU=@host.docker.internal:5432/postgres
      - REDIS_URL=redis://:redis_secure@ultramcp-redis:6379
    ports:
      - "8123:8123"
    networks:
      - ultramcp-hybrid
    depends_on:
      - ultramcp-redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8123/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Observatory Frontend (puerto 5177)
  ultramcp-observatory:
    build:
      context: ./mcp-observatory
      dockerfile: Dockerfile
    container_name: ultramcp-observatory
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=http://localhost:3001
    ports:
      - "5177:80"
    networks:
      - ultramcp-hybrid
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis_hybrid_data:
    driver: local
  qdrant_hybrid_data:
    driver: local

networks:
  ultramcp-hybrid:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16

# Configuraci√≥n externa para Supabase
# PostgreSQL: usa Supabase en localhost:5432
# Nginx: configurado para manejar subdominios