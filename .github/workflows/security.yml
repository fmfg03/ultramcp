# UltraMCP ContextBuilderAgent 2.0 - Security Pipeline
# Advanced security scanning and compliance validation

name: 🔒 Security & Compliance Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run comprehensive security scans daily
    - cron: '0 3 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # ============================================================================
  # Static Application Security Testing (SAST)
  # ============================================================================
  
  sast-scan:
    name: 🔍 SAST Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 🔒 Bandit Security Scan
        run: |
          pip install bandit[toml]
          bandit -r services/ -f json -o bandit-results.json
          bandit -r services/ -f sarif -o bandit-results.sarif

      - name: 📤 Upload Bandit Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: bandit-results.sarif

      - name: 🔍 Semgrep Security Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/python
            p/docker
            p/kubernetes

      - name: 🛡️ CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: python, javascript
          queries: security-and-quality

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # ============================================================================
  # Secret Detection
  # ============================================================================
  
  secret-detection:
    name: 🔐 Secret Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: 🔐 GitLeaks Secret Detection
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # Container Security
  # ============================================================================
  
  container-security:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐳 Build Test Image
        run: |
          docker build -t contextbuilder-test:latest .

      - name: 🔒 Trivy Container Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'contextbuilder-test:latest'
          format: 'sarif'
          output: 'trivy-container-results.sarif'

      - name: 📤 Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-container-results.sarif'

      - name: 🐳 Docker Security Bench
        run: |
          git clone https://github.com/docker/docker-bench-security.git
          cd docker-bench-security
          sudo sh docker-bench-security.sh

      - name: 🔍 Hadolint Dockerfile Scan
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint-results.sarif

      - name: 📤 Upload Hadolint Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: hadolint-results.sarif

  # ============================================================================
  # Kubernetes Security
  # ============================================================================
  
  k8s-security:
    name: ☸️ Kubernetes Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Kubesec Security Scan
        run: |
          curl -sSX POST --data-binary @k8s/deployments/contextbuilder-deployments.yaml \
            https://v2.kubesec.io/scan > kubesec-results.json
          cat kubesec-results.json

      - name: 🛡️ Polaris Security Validation
        run: |
          curl -L https://github.com/FairwindsOps/polaris/releases/latest/download/polaris_linux_amd64.tar.gz \
            | tar -xz
          sudo mv polaris /usr/local/bin/
          polaris audit --audit-path k8s/ --format json > polaris-results.json

      - name: 🔒 Falco Rule Validation
        run: |
          docker run --rm -v $(pwd):/workspace falcosecurity/falco:latest \
            falco --validate /workspace/k8s/security/falco-rules.yaml

      - name: 📊 OPA Policy Validation
        uses: open-policy-agent/conftest-action@v0.1
        with:
          files: k8s/
          policy: tests/policies/

  # ============================================================================
  # Dependency Security
  # ============================================================================
  
  dependency-security:
    name: 📦 Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 🔍 Python Safety Check
        run: |
          pip install safety
          safety check --json --output safety-results.json

      - name: 📊 Pip Audit
        run: |
          pip install pip-audit
          pip-audit --format json --output pip-audit-results.json

      - name: 🔍 NPM Audit
        run: |
          npm audit --audit-level moderate --json > npm-audit-results.json

      - name: 🔒 Snyk Security Scan
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk-results.json

      - name: 📤 Upload Security Results
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            safety-results.json
            pip-audit-results.json
            npm-audit-results.json
            snyk-results.json

  # ============================================================================
  # Infrastructure Security
  # ============================================================================
  
  infrastructure-security:
    name: 🏗️ Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Terraform Security Scan
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: infrastructure/

      - name: 🔒 Checkov Infrastructure Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,kubernetes
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: 📤 Upload Checkov Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-results.sarif

  # ============================================================================
  # Compliance Validation
  # ============================================================================
  
  compliance-validation:
    name: 📋 Compliance Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🏛️ SOC2 Compliance Check
        run: |
          # Check for required security controls
          echo "Validating SOC2 compliance controls..."
          
          # Access Controls
          test -f k8s/secrets/database-secrets.yaml || (echo "Missing access controls" && exit 1)
          
          # Audit Logging
          grep -q "log_statement" k8s/configmaps/postgres-config.yaml || (echo "Missing audit logging" && exit 1)
          
          # Encryption
          grep -q "ssl" k8s/ingress/ingress.yaml || (echo "Missing encryption" && exit 1)
          
          echo "SOC2 compliance validation passed"

      - name: 🛡️ GDPR Compliance Check
        run: |
          # Check for GDPR requirements
          echo "Validating GDPR compliance..."
          
          # Data retention policies
          grep -q "retention" config/monitoring/prometheus.yml || (echo "Missing data retention policy" && exit 1)
          
          # Privacy controls
          test -f docs/privacy-policy.md || (echo "Missing privacy policy" && exit 1)
          
          echo "GDPR compliance validation passed"

      - name: 🔐 NIST Cybersecurity Framework
        run: |
          # NIST CSF validation
          echo "Validating NIST Cybersecurity Framework compliance..."
          
          # Identify: Asset management
          test -f k8s/namespace.yaml || (echo "Missing asset management" && exit 1)
          
          # Protect: Access control
          grep -q "rbac" k8s/ -r || echo "Consider implementing RBAC"
          
          # Detect: Monitoring
          test -f k8s/deployments/monitoring-deployments.yaml || (echo "Missing monitoring" && exit 1)
          
          # Respond: Incident response
          test -f docs/incident-response.md || echo "Consider adding incident response plan"
          
          # Recover: Backup and recovery
          grep -q "backup" scripts/ -r || echo "Consider implementing backup procedures"
          
          echo "NIST CSF validation completed"

  # ============================================================================
  # Security Report Generation
  # ============================================================================
  
  security-report:
    name: 📊 Security Report Generation
    runs-on: ubuntu-latest
    needs: [
      sast-scan,
      secret-detection,
      container-security,
      k8s-security,
      dependency-security,
      infrastructure-security,
      compliance-validation
    ]
    if: always()
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📊 Generate Security Summary
        run: |
          echo "# 🔒 ContextBuilderAgent Security Report" > security-report.md
          echo "" >> security-report.md
          echo "## Security Scan Results" >> security-report.md
          echo "" >> security-report.md
          echo "| Component | Status |" >> security-report.md
          echo "|-----------|--------|" >> security-report.md
          echo "| SAST Scan | ${{ needs.sast-scan.result }} |" >> security-report.md
          echo "| Secret Detection | ${{ needs.secret-detection.result }} |" >> security-report.md
          echo "| Container Security | ${{ needs.container-security.result }} |" >> security-report.md
          echo "| Kubernetes Security | ${{ needs.k8s-security.result }} |" >> security-report.md
          echo "| Dependency Security | ${{ needs.dependency-security.result }} |" >> security-report.md
          echo "| Infrastructure Security | ${{ needs.infrastructure-security.result }} |" >> security-report.md
          echo "| Compliance Validation | ${{ needs.compliance-validation.result }} |" >> security-report.md
          echo "" >> security-report.md
          echo "Generated on: $(date)" >> security-report.md

      - name: 📤 Upload Security Report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md

      - name: 📧 Security Alert Notification
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "🚨 Security scan detected issues in ContextBuilderAgent repository!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}

      - name: 💬 Add Security Comment to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });