[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "supermcp"
version = "4.0.0"
description = "SuperMCP - Universal Multi-Channel Protocol with Advanced AI Orchestration"
authors = [{name = "SuperMCP Team", email = "noreply@supermcp.dev"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.8"
keywords = ["mcp", "ai", "orchestration", "llm", "agents", "automation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

# Core dependencies
dependencies = [
    # Web Frameworks
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "flask>=2.3.0",
    "flask-cors>=4.0.0",
    
    # Async and HTTP
    "aiohttp>=3.8.0",
    "httpx>=0.24.0",
    "asyncio-mqtt>=0.13.0",
    "websockets>=11.0.0",
    
    # Data Validation and Processing
    "pydantic>=2.0.0",
    "jsonschema>=4.17.0",
    "python-dotenv>=1.0.0",
    "requests>=2.31.0",
    
    # Database and Storage
    "supabase>=1.0.0",
    "psycopg2-binary>=2.9.0",
    "redis>=4.5.0",
    "sqlalchemy>=2.0.0",
    "neo4j>=5.26.0",
    
    # Knowledge Graph and AI
    "graphiti-core[anthropic,google-genai]>=0.1.0",
    "openai>=1.0.0",
    "langwatch>=0.2.0",
    
    # LangGraph and LangChain
    "langgraph>=0.2.0",
    "langchain>=0.3.0",
    "langchain-openai>=0.2.0",
    "langchain-anthropic>=0.2.0",
    "langchain-google-genai>=2.0.0",
    
    # Security and Authentication
    "cryptography>=41.0.0",
    "pyjwt>=2.8.0",
    "bcrypt>=4.0.0",
    "passlib>=1.7.4",
    
    # Monitoring and Logging
    "prometheus-client>=0.17.0",
    "structlog>=23.1.0",
    "sentry-sdk>=1.29.0",
    
    # Utilities
    "python-dateutil>=2.8.0",
    "pytz>=2023.3",
    "click>=8.1.0",
    "colorama>=0.4.6",
    "tqdm>=4.65.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pylint>=2.17.0",
]

# Voice system dependencies (optional)
voice = [
    "openai-whisper>=20231117",
    "scipy>=1.11.0",
    "numpy>=1.24.0",
]

# Production deployment dependencies
production = [
    "gunicorn>=21.0.0",
    "prometheus-client>=0.17.0",
    "sentry-sdk>=1.29.0",
]

[project.urls]
Homepage = "https://github.com/fmfg03/ultramcp"
Documentation = "https://github.com/fmfg03/ultramcp/docs"
Repository = "https://github.com/fmfg03/ultramcp.git"
Issues = "https://github.com/fmfg03/ultramcp/issues"

[project.scripts]
supermcp = "index:main"
mcp-orchestrator = "core.orchestrator.index:main"

[tool.setuptools]
packages = ["supermcp"]

[tool.setuptools.package-dir]
"supermcp" = "."

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | node_modules
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["supermcp"]
skip = ["migrations", "node_modules"]

# mypy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
exclude = [
    "node_modules/",
    "build/",
    "dist/",
]

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
    "apps/backend/test",
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/node_modules/*",
    "*/venv/*",
    "*/migrations/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]