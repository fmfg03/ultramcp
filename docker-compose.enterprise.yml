# Docker Compose Enterprise - MCP System
# Configuración completa para entorno de producción

version: '3.8'

services:
  # ================================
  # FRONTEND SERVICE
  # ================================
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
      target: production
    container_name: mcp-frontend-enterprise
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://backend:3000
      - REACT_APP_WS_URL=ws://backend:3001
    volumes:
      - ./frontend/dist:/usr/share/nginx/html:ro
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://sam.chat/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # BACKEND SERVICE
  # ================================
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
      target: production
    container_name: mcp-backend-enterprise
    restart: unless-stopped
    ports:
      - "3000:3000"
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://mcpuser:mcppass@postgres:5432/mcpdb
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-mcp_jwt_secret_2024}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
    volumes:
      - ./backend:/app/backend
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - postgres
      - redis
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://sam.chat:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # LANGGRAPH STUDIO SERVICE
  # ================================
  langgraph-studio:
    build:
      context: .
      dockerfile: docker/Dockerfile.langgraph
    container_name: mcp-langgraph-studio
    restart: unless-stopped
    ports:
      - "8123:8123"
    environment:
      - LANGGRAPH_ENV=production
      - LANGGRAPH_CONFIG_PATH=/app/config/production.json
      - DATABASE_URL=postgresql://mcpuser:mcppass@postgres:5432/mcpdb
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./langgraph_system:/app/langgraph_system
      - ./config:/app/config
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://sam.chat:8123/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # OBSERVER ENTERPRISE SERVICE
  # ================================
  observer:
    build:
      context: .
      dockerfile: docker/Dockerfile.observer
    container_name: mcp-observer-enterprise
    restart: unless-stopped
    ports:
      - "8124:8124"
    environment:
      - OBSERVER_ENV=production
      - DATABASE_URL=postgresql://mcpuser:mcppass@postgres:5432/mcpdb
      - REDIS_URL=redis://redis:6379
      - MONITORING_ENABLED=true
    volumes:
      - ./observer_system:/app/observer_system
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - postgres
      - redis
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://sam.chat:8124/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # DATABASE SERVICE
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: mcp-postgres-enterprise
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=mcpdb
      - POSTGRES_USER=mcpuser
      - POSTGRES_PASSWORD=mcppass
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mcpuser -d mcpdb"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # REDIS SERVICE
  # ================================
  redis:
    image: redis:7-alpine
    container_name: mcp-redis-enterprise
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass mcpredispass
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # MONITORING SERVICES
  # ================================
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mcp-network

  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=mcpgrafana2024
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - mcp-network

  # ================================
  # NGINX LOAD BALANCER
  # ================================
  nginx:
    image: nginx:alpine
    container_name: mcp-nginx-lb
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
      - langgraph-studio
      - observer
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://sam.chat/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# ================================
# NETWORKS
# ================================
networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ================================
# VOLUMES
# ================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

