# UltraMCP Hybrid Implementation - Optimized for Terminal-First Approach
version: '3.8'

services:
  # Core database (minimal footprint)
  ultramcp-postgres:
    image: postgres:15-alpine
    container_name: ultramcp-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ultramcp}
      POSTGRES_USER: ${POSTGRES_USER:-ultramcp}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ultramcp_secure}
    volumes:
      - postgres_hybrid_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - ultramcp-hybrid
    restart: unless-stopped

  # Lightweight Redis
  ultramcp-redis:
    image: redis:7-alpine
    container_name: ultramcp-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure}
    volumes:
      - redis_hybrid_data:/data
    ports:
      - "6379:6379"
    networks:
      - ultramcp-hybrid
    restart: unless-stopped

  # Qdrant Vector Database
  ultramcp-qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: ultramcp-qdrant
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    volumes:
      - qdrant_hybrid_data:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"
    networks:
      - ultramcp-hybrid
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://sam.chat:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # VoyageAI Hybrid Service
  ultramcp-voyage-ai:
    build:
      context: ./services/voyage-ai
      dockerfile: Dockerfile
    container_name: ultramcp-voyage-ai
    environment:
      - VOYAGE_API_KEY=${VOYAGE_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CACHE_TTL=3600
      - MAX_CACHE_SIZE=10000
    ports:
      - "8010:8010"
    networks:
      - ultramcp-hybrid
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://sam.chat:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # CoD Protocol Service (20% advanced orchestration)
  ultramcp-cod-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: cod-service
    container_name: ultramcp-cod-service
    environment:
      - COD_SERVICE_PORT=8001
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-ultramcp}:${POSTGRES_PASSWORD:-ultramcp_secure}@ultramcp-postgres:5432/${POSTGRES_DB:-ultramcp}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure}@ultramcp-redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - PYTHONPATH=/app
    ports:
      - "8001:8001"
    depends_on:
      - ultramcp-postgres
      - ultramcp-redis
    networks:
      - ultramcp-hybrid
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped

  # Terminal Interface (80% terminal-first)
  ultramcp-terminal:
    build:
      context: .
      dockerfile: Dockerfile  
      target: terminal
    container_name: ultramcp-terminal
    environment:
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-ultramcp}:${POSTGRES_PASSWORD:-ultramcp_secure}@ultramcp-postgres:5432/${POSTGRES_DB:-ultramcp}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure}@ultramcp-redis:6379/0
      - COD_SERVICE_URL=http://ultramcp-cod-service:8001
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - PYTHONPATH=/app
    depends_on:
      - ultramcp-postgres
      - ultramcp-redis
      - ultramcp-cod-service
    networks:
      - ultramcp-hybrid
    volumes:
      - ./scripts:/app/scripts:ro
      - ./logs:/app/logs
      - ./data:/app/data
      - ./Makefile:/app/Makefile:ro
      - /var/run/docker.sock:/var/run/docker.sock  # For Docker operations
    working_dir: /app
    tty: true
    stdin_open: true
    restart: unless-stopped
    command: >
      bash -c "
        echo 'ðŸš€ UltraMCP Hybrid Terminal Interface Ready!' &&
        echo 'ðŸ“‹ Available commands: make help' &&
        echo 'ðŸ”§ Interactive mode: docker exec -it ultramcp-terminal bash' &&
        tail -f /dev/null
      "

  # Asterisk MCP Security Service
  ultramcp-asterisk-mcp:
    build:
      context: ./services/asterisk-mcp
      dockerfile: Dockerfile
    container_name: ultramcp-asterisk-mcp
    environment:
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-ultramcp}:${POSTGRES_PASSWORD:-ultramcp_secure}@ultramcp-postgres:5432/${POSTGRES_DB:-ultramcp}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure}@ultramcp-redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    ports:
      - "8002:8002"
    depends_on:
      - ultramcp-postgres
      - ultramcp-redis
    networks:
      - ultramcp-hybrid
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - .:/app/scan_target:ro  # Mount project for scanning
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://sam.chat:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Context7 Real-time Documentation Service
  ultramcp-context7:
    build:
      context: ./services/context7-mcp
      dockerfile: Dockerfile
    container_name: ultramcp-context7
    environment:
      - MCP_SERVER_PORT=8003
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-ultramcp}:${POSTGRES_PASSWORD:-ultramcp_secure}@ultramcp-postgres:5432/${POSTGRES_DB:-ultramcp}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure}@ultramcp-redis:6379/0
      - CONTEXT7_CACHE_TTL=3600
      - CONTEXT7_MAX_DOCS=50
      - NODE_ENV=production
    ports:
      - "8003:8003"
    depends_on:
      - ultramcp-postgres
      - ultramcp-redis
    networks:
      - ultramcp-hybrid
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "scripts/health-check.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Blockoli Code Intelligence Service
  ultramcp-blockoli:
    build:
      context: ./services/blockoli-mcp
      dockerfile: Dockerfile
    container_name: ultramcp-blockoli
    environment:
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-ultramcp}:${POSTGRES_PASSWORD:-ultramcp_secure}@ultramcp-postgres:5432/${POSTGRES_DB:-ultramcp}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure}@ultramcp-redis:6379/0
      - BLOCKOLI_ENDPOINT=${BLOCKOLI_ENDPOINT:-http://sam.chat:8080}
      - BLOCKOLI_API_KEY=${BLOCKOLI_API_KEY}
    ports:
      - "8080:8080"  # Changed from 8003 to avoid conflict with Context7
    depends_on:
      - ultramcp-postgres
      - ultramcp-redis
    networks:
      - ultramcp-hybrid
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - .:/app/project_root:ro  # Mount project for code analysis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://sam.chat:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Voice System Service
  ultramcp-voice:
    build:
      context: ./services/voice-system
      dockerfile: Dockerfile
    container_name: ultramcp-voice
    environment:
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-ultramcp}:${POSTGRES_PASSWORD:-ultramcp_secure}@ultramcp-postgres:5432/${POSTGRES_DB:-ultramcp}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure}@ultramcp-redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - VOICE_SERVICE_PORT=8004
    ports:
      - "8004:8004"
      - "8005:8005"  # WebSocket port for real-time voice
    depends_on:
      - ultramcp-postgres
      - ultramcp-redis
    networks:
      - ultramcp-hybrid
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./data/voice:/app/voice_data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://sam.chat:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # DeepClaude Metacognitive Service
  ultramcp-deepclaude:
    build:
      context: ./services/deepclaude
      dockerfile: Dockerfile
    container_name: ultramcp-deepclaude
    environment:
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-ultramcp}:${POSTGRES_PASSWORD:-ultramcp_secure}@ultramcp-postgres:5432/${POSTGRES_DB:-ultramcp}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure}@ultramcp-redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - NEO4J_URI=${NEO4J_URI:-bolt://sam.chat:7687}
      - NEO4J_USERNAME=${NEO4J_USERNAME:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-neo4j_password}
    ports:
      - "8006:8006"
    depends_on:
      - ultramcp-postgres
      - ultramcp-redis
    networks:
      - ultramcp-hybrid
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://sam.chat:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Enhanced Claude Code Memory Service with VoyageAI
  ultramcp-claude-memory:
    build:
      context: ./services/claude-code-memory
      dockerfile: Dockerfile
    container_name: ultramcp-claude-memory
    environment:
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-ultramcp}:${POSTGRES_PASSWORD:-ultramcp_secure}@ultramcp-postgres:5432/${POSTGRES_DB:-ultramcp}
      - QDRANT_URL=http://ultramcp-qdrant:6333
      - VOYAGE_SERVICE_URL=http://ultramcp-voyage-ai:8010
      - VOYAGE_API_KEY=${VOYAGE_API_KEY}
      - MEMORY_SERVICE_PORT=8009
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure}@ultramcp-redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    ports:
      - "8009:8009"
    depends_on:
      - ultramcp-postgres
      - ultramcp-redis
      - ultramcp-qdrant
      - ultramcp-voyage-ai
    networks:
      - ultramcp-hybrid
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./data/code_memory:/app/memory_data
      - .:/app/project_root:ro  # Mount project for code analysis
      - memory_models:/app/models  # Cache for sentence transformers
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://sam.chat:8009/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ref Tools MCP Service
  ultramcp-ref-tools:
    build:
      context: ./services/ref-tools-mcp
      dockerfile: Dockerfile
    container_name: ultramcp-ref-tools
    environment:
      - REF_SERVICE_PORT=8011
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - INTERNAL_DOCS_API_KEY=${INTERNAL_DOCS_API_KEY}
      - INTERNAL_DOCS_URL=${INTERNAL_DOCS_URL:-https://docs.internal.company.com}
      - TEAM_WIKI_URL=${TEAM_WIKI_URL:-https://wiki.internal.company.com}
      - ADR_URL=${ADR_URL:-https://adr.internal.company.com}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "8011:8011"
    networks:
      - ultramcp-hybrid
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./data/ref_tools:/app/ref_data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://sam.chat:8011/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Unified Documentation Intelligence Service
  ultramcp-unified-docs:
    build:
      context: ./services/unified-docs
      dockerfile: Dockerfile
    container_name: ultramcp-unified-docs
    environment:
      - UNIFIED_DOCS_PORT=8012
      - CONTEXT7_SERVICE_URL=http://ultramcp-context7:8003
      - REF_TOOLS_SERVICE_URL=http://ultramcp-ref-tools:8011
      - VOYAGE_SERVICE_URL=http://ultramcp-voyage-ai:8010
      - MEMORY_SERVICE_URL=http://ultramcp-claude-memory:8009
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "8012:8012"
    depends_on:
      - ultramcp-ref-tools
      - ultramcp-claude-memory
      - ultramcp-voyage-ai
    networks:
      - ultramcp-hybrid
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./data/unified_docs:/app/unified_data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://sam.chat:8012/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Control Tower WebSocket Service
  ultramcp-control-tower:
    build:
      context: ./services/control-tower
      dockerfile: Dockerfile
    container_name: ultramcp-control-tower
    environment:
      - CONTROL_TOWER_PORT=8007
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-ultramcp}:${POSTGRES_PASSWORD:-ultramcp_secure}@ultramcp-postgres:5432/${POSTGRES_DB:-ultramcp}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure}@ultramcp-redis:6379/0
      - COD_SERVICE_URL=http://ultramcp-cod-service:8001
      - ASTERISK_SERVICE_URL=http://ultramcp-asterisk-mcp:8002
      - CONTEXT7_SERVICE_URL=http://ultramcp-context7:8003
      - BLOCKOLI_SERVICE_URL=http://ultramcp-blockoli:8080
      - VOICE_SERVICE_URL=http://ultramcp-voice:8004
      - DEEPCLAUDE_SERVICE_URL=http://ultramcp-deepclaude:8006
      - CLAUDE_MEMORY_SERVICE_URL=http://ultramcp-claude-memory:8009
    ports:
      - "8007:8007"
      - "8008:8008"  # WebSocket port
    depends_on:
      - ultramcp-cod-service
      - ultramcp-asterisk-mcp
      - ultramcp-context7
      - ultramcp-blockoli
      - ultramcp-voice
      - ultramcp-deepclaude
      - ultramcp-claude-memory
    networks:
      - ultramcp-hybrid
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://sam.chat:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Claudia Integration Service - Enhanced Agent Management
  ultramcp-claudia-integration:
    build:
      context: ./services/claudia-integration
      dockerfile: Dockerfile
    container_name: ultramcp-claudia-integration
    environment:
      - COD_SERVICE_URL=http://ultramcp-cod-service:8001
      - ASTERISK_SERVICE_URL=http://ultramcp-asterisk-mcp:8002
      - BLOCKOLI_SERVICE_URL=http://ultramcp-blockoli:8080
      - VOICE_SERVICE_URL=http://ultramcp-voice:8004
      - DEEPCLAUDE_SERVICE_URL=http://ultramcp-deepclaude:8006
      - CONTROL_TOWER_URL=http://ultramcp-control-tower:8007
      - MEMORY_SERVICE_URL=http://ultramcp-claude-memory:8009
      - VOYAGE_SERVICE_URL=http://ultramcp-voyage-ai:8010
      - REF_TOOLS_SERVICE_URL=http://ultramcp-ref-tools:8011
    ports:
      - "8013:8013"
    depends_on:
      - ultramcp-cod-service
      - ultramcp-asterisk-mcp
      - ultramcp-blockoli
      - ultramcp-voice
      - ultramcp-deepclaude
      - ultramcp-claude-memory
    networks:
      - ultramcp-hybrid
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://sam.chat:8013/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Lightweight monitoring dashboard
  ultramcp-dashboard:
    build:
      context: .
      dockerfile: Dockerfile
      target: web-dashboard
    container_name: ultramcp-dashboard
    environment:
      - COD_SERVICE_URL=http://ultramcp-cod-service:8001
      - ASTERISK_SERVICE_URL=http://ultramcp-asterisk-mcp:8002
      - BLOCKOLI_SERVICE_URL=http://ultramcp-blockoli:8003
      - VOICE_SERVICE_URL=http://ultramcp-voice:8004
      - DEEPCLAUDE_SERVICE_URL=http://ultramcp-deepclaude:8006
      - CONTROL_TOWER_URL=http://ultramcp-control-tower:8007
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-ultramcp}:${POSTGRES_PASSWORD:-ultramcp_secure}@ultramcp-postgres:5432/${POSTGRES_DB:-ultramcp}
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      - ultramcp-cod-service
      - ultramcp-asterisk-mcp
      - ultramcp-blockoli
      - ultramcp-voice
      - ultramcp-deepclaude
      - ultramcp-control-tower
    networks:
      - ultramcp-hybrid
    volumes:
      - ./logs:/app/logs:ro
      - ./data:/app/data:ro
    restart: unless-stopped

networks:
  ultramcp-hybrid:
    driver: bridge
    name: ultramcp-hybrid-network

volumes:
  postgres_hybrid_data:
    name: ultramcp-postgres-hybrid
  redis_hybrid_data:
    name: ultramcp-redis-hybrid
  qdrant_hybrid_data:
    name: ultramcp-qdrant-hybrid
  memory_models:
    name: ultramcp-memory-models

# Usage:
# docker-compose -f docker-compose.hybrid.yml up -d
# docker exec -it ultramcp-terminal bash
# make help