# UltraMCP Hybrid Implementation - Optimized for Terminal-First Approach
version: '3.8'

services:
  # Core database (minimal footprint)
  ultramcp-postgres:
    image: postgres:15-alpine
    container_name: ultramcp-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ultramcp}
      POSTGRES_USER: ${POSTGRES_USER:-ultramcp}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ultramcp_secure}
    volumes:
      - postgres_hybrid_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - ultramcp-hybrid
    restart: unless-stopped

  # Lightweight Redis
  ultramcp-redis:
    image: redis:7-alpine
    container_name: ultramcp-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure}
    volumes:
      - redis_hybrid_data:/data
    ports:
      - "6379:6379"
    networks:
      - ultramcp-hybrid
    restart: unless-stopped

  # CoD Protocol Service (20% advanced orchestration)
  ultramcp-cod-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: cod-service
    container_name: ultramcp-cod-service
    environment:
      - COD_SERVICE_PORT=8001
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-ultramcp}:${POSTGRES_PASSWORD:-ultramcp_secure}@ultramcp-postgres:5432/${POSTGRES_DB:-ultramcp}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure}@ultramcp-redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - PYTHONPATH=/app
    ports:
      - "8001:8001"
    depends_on:
      - ultramcp-postgres
      - ultramcp-redis
    networks:
      - ultramcp-hybrid
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped

  # Terminal Interface (80% terminal-first)
  ultramcp-terminal:
    build:
      context: .
      dockerfile: Dockerfile  
      target: terminal
    container_name: ultramcp-terminal
    environment:
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-ultramcp}:${POSTGRES_PASSWORD:-ultramcp_secure}@ultramcp-postgres:5432/${POSTGRES_DB:-ultramcp}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure}@ultramcp-redis:6379/0
      - COD_SERVICE_URL=http://ultramcp-cod-service:8001
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - PYTHONPATH=/app
    depends_on:
      - ultramcp-postgres
      - ultramcp-redis
      - ultramcp-cod-service
    networks:
      - ultramcp-hybrid
    volumes:
      - ./scripts:/app/scripts:ro
      - ./logs:/app/logs
      - ./data:/app/data
      - ./Makefile:/app/Makefile:ro
      - /var/run/docker.sock:/var/run/docker.sock  # For Docker operations
    working_dir: /app
    tty: true
    stdin_open: true
    restart: unless-stopped
    command: >
      bash -c "
        echo 'ðŸš€ UltraMCP Hybrid Terminal Interface Ready!' &&
        echo 'ðŸ“‹ Available commands: make help' &&
        echo 'ðŸ”§ Interactive mode: docker exec -it ultramcp-terminal bash' &&
        tail -f /dev/null
      "

  # Asterisk MCP Security Service
  ultramcp-asterisk-mcp:
    build:
      context: ./services/asterisk-mcp
      dockerfile: Dockerfile
    container_name: ultramcp-asterisk-mcp
    environment:
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-ultramcp}:${POSTGRES_PASSWORD:-ultramcp_secure}@ultramcp-postgres:5432/${POSTGRES_DB:-ultramcp}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure}@ultramcp-redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    ports:
      - "8002:8002"
    depends_on:
      - ultramcp-postgres
      - ultramcp-redis
    networks:
      - ultramcp-hybrid
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - .:/app/scan_target:ro  # Mount project for scanning
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Blockoli Code Intelligence Service
  ultramcp-blockoli:
    build:
      context: ./services/blockoli-mcp
      dockerfile: Dockerfile
    container_name: ultramcp-blockoli
    environment:
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-ultramcp}:${POSTGRES_PASSWORD:-ultramcp_secure}@ultramcp-postgres:5432/${POSTGRES_DB:-ultramcp}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure}@ultramcp-redis:6379/0
      - BLOCKOLI_ENDPOINT=${BLOCKOLI_ENDPOINT:-http://localhost:8080}
      - BLOCKOLI_API_KEY=${BLOCKOLI_API_KEY}
    ports:
      - "8003:8003"
    depends_on:
      - ultramcp-postgres
      - ultramcp-redis
    networks:
      - ultramcp-hybrid
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - .:/app/project_root:ro  # Mount project for code analysis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Voice System Service
  ultramcp-voice:
    build:
      context: ./services/voice-system
      dockerfile: Dockerfile
    container_name: ultramcp-voice
    environment:
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-ultramcp}:${POSTGRES_PASSWORD:-ultramcp_secure}@ultramcp-postgres:5432/${POSTGRES_DB:-ultramcp}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure}@ultramcp-redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - VOICE_SERVICE_PORT=8004
    ports:
      - "8004:8004"
      - "8005:8005"  # WebSocket port for real-time voice
    depends_on:
      - ultramcp-postgres
      - ultramcp-redis
    networks:
      - ultramcp-hybrid
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./data/voice:/app/voice_data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # DeepClaude Metacognitive Service
  ultramcp-deepclaude:
    build:
      context: ./services/deepclaude
      dockerfile: Dockerfile
    container_name: ultramcp-deepclaude
    environment:
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-ultramcp}:${POSTGRES_PASSWORD:-ultramcp_secure}@ultramcp-postgres:5432/${POSTGRES_DB:-ultramcp}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure}@ultramcp-redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - NEO4J_URI=${NEO4J_URI:-bolt://localhost:7687}
      - NEO4J_USERNAME=${NEO4J_USERNAME:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-neo4j_password}
    ports:
      - "8006:8006"
    depends_on:
      - ultramcp-postgres
      - ultramcp-redis
    networks:
      - ultramcp-hybrid
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Control Tower WebSocket Service
  ultramcp-control-tower:
    build:
      context: ./services/control-tower
      dockerfile: Dockerfile
    container_name: ultramcp-control-tower
    environment:
      - CONTROL_TOWER_PORT=8007
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-ultramcp}:${POSTGRES_PASSWORD:-ultramcp_secure}@ultramcp-postgres:5432/${POSTGRES_DB:-ultramcp}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure}@ultramcp-redis:6379/0
      - COD_SERVICE_URL=http://ultramcp-cod-service:8001
      - ASTERISK_SERVICE_URL=http://ultramcp-asterisk-mcp:8002
      - BLOCKOLI_SERVICE_URL=http://ultramcp-blockoli:8003
      - VOICE_SERVICE_URL=http://ultramcp-voice:8004
      - DEEPCLAUDE_SERVICE_URL=http://ultramcp-deepclaude:8006
    ports:
      - "8007:8007"
      - "8008:8008"  # WebSocket port
    depends_on:
      - ultramcp-cod-service
      - ultramcp-asterisk-mcp
      - ultramcp-blockoli
      - ultramcp-voice
      - ultramcp-deepclaude
    networks:
      - ultramcp-hybrid
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Lightweight monitoring dashboard
  ultramcp-dashboard:
    build:
      context: .
      dockerfile: Dockerfile
      target: web-dashboard
    container_name: ultramcp-dashboard
    environment:
      - COD_SERVICE_URL=http://ultramcp-cod-service:8001
      - ASTERISK_SERVICE_URL=http://ultramcp-asterisk-mcp:8002
      - BLOCKOLI_SERVICE_URL=http://ultramcp-blockoli:8003
      - VOICE_SERVICE_URL=http://ultramcp-voice:8004
      - DEEPCLAUDE_SERVICE_URL=http://ultramcp-deepclaude:8006
      - CONTROL_TOWER_URL=http://ultramcp-control-tower:8007
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-ultramcp}:${POSTGRES_PASSWORD:-ultramcp_secure}@ultramcp-postgres:5432/${POSTGRES_DB:-ultramcp}
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      - ultramcp-cod-service
      - ultramcp-asterisk-mcp
      - ultramcp-blockoli
      - ultramcp-voice
      - ultramcp-deepclaude
      - ultramcp-control-tower
    networks:
      - ultramcp-hybrid
    volumes:
      - ./logs:/app/logs:ro
      - ./data:/app/data:ro
    restart: unless-stopped

networks:
  ultramcp-hybrid:
    driver: bridge
    name: ultramcp-hybrid-network

volumes:
  postgres_hybrid_data:
    name: ultramcp-postgres-hybrid
  redis_hybrid_data:
    name: ultramcp-redis-hybrid

# Usage:
# docker-compose -f docker-compose.hybrid.yml up -d
# docker exec -it ultramcp-terminal bash
# make help