-- SQL script to create the credentials table if it doesn't exist.

CREATE TABLE IF NOT EXISTS credentials (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  service TEXT NOT NULL,
  key TEXT NOT NULL,
  value TEXT NOT NULL, -- Encrypted value
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  UNIQUE (service, key) -- Ensure that each service/key pair is unique
);

-- Optional: Add a trigger to automatically update updated_at timestamp on row modification
CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Drop trigger if it exists to avoid errors on re-run, then create it
DROP TRIGGER IF EXISTS set_credentials_timestamp ON credentials;
CREATE TRIGGER set_credentials_timestamp
BEFORE UPDATE ON credentials
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

COMMENT ON TABLE credentials IS 'Stores encrypted credentials for various services used by the MCP system.';
COMMENT ON COLUMN credentials.service IS 'The name of the service, e.g., "telegram", "firecrawl".';
COMMENT ON COLUMN credentials.key IS 'The specific key for the service, e.g., "botToken", "apiKey".';
COMMENT ON COLUMN credentials.value IS 'The encrypted credential value.';

