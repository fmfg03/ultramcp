const { createClient } = require("@supabase/supabase-js");

// Load environment variables from .env file
require("dotenv").config({ path: require("path").resolve(__dirname, "../../../../.env") });

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error("Supabase URL or Key is not defined. Make sure SUPABASE_URL and SUPABASE_KEY are set in your .env file.");
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function setupDatabase() {
  console.log("Starting database setup...");
  try {
    // Create the command_logs table if it doesn't exist
    const createCommandLogsTableQuery = `
      CREATE TABLE IF NOT EXISTS public.command_logs (
        id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        command TEXT NOT NULL,
        status TEXT NOT NULL,
        output TEXT,
        error TEXT,
        created_at TIMESTAMPTZ DEFAULT NOW(),
        updated_at TIMESTAMPTZ DEFAULT NOW()
      );
    `;
    // Assuming the user has created an RPC function named 'execute_sql_statement' as per earlier guidance
    // or that 'execute_sql' with param 'sql' is available. Let's try 'execute_sql_statement' first as it was in a more stable prior version.
    // If this fails, we might need to ask user to confirm/create the RPC or try 'execute_sql'.
    console.log("Attempting to create command_logs table...");
    const { error: createCommandLogsTableError } = await supabase.rpc("execute_sql_statement", { sql_query: createCommandLogsTableQuery }); 
    if (createCommandLogsTableError) {
      console.error("Error creating command_logs table:", createCommandLogsTableError.message);
      console.warn("Please ensure the RPC function 'execute_sql_statement(sql_query TEXT)' exists in your Supabase project.");
      // Do not return, attempt to create other tables
    } else {
      console.log("command_logs table created or already exists.");
    }

    // Create the credentials table if it doesn't exist
    const createCredentialsTableQuery = `
      CREATE TABLE IF NOT EXISTS public.credentials (
        id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        service TEXT NOT NULL,
        key TEXT NOT NULL,
        value TEXT NOT NULL, -- Encrypted value
        created_at TIMESTAMPTZ DEFAULT NOW(),
        updated_at TIMESTAMPTZ DEFAULT NOW(),
        UNIQUE (service, key)
      );
    `;
    console.log("Attempting to create credentials table...");
    const { error: createCredentialsTableError } = await supabase.rpc("execute_sql_statement", { sql_query: createCredentialsTableQuery });
    if (createCredentialsTableError) {
      console.error("Error creating credentials table:", createCredentialsTableError.message);
      console.warn("Please ensure the RPC function 'execute_sql_statement(sql_query TEXT)' exists in your Supabase project.");
    } else {
      console.log("credentials table created or already exists.");
    }

    // Add trigger for updated_at on credentials table
    const createCredentialsTriggerSql = `
      CREATE OR REPLACE FUNCTION public.trigger_set_timestamp()
      RETURNS TRIGGER AS $$
      BEGIN
        NEW.updated_at = NOW();
        RETURN NEW;
      END;
      $$ LANGUAGE plpgsql;

      DROP TRIGGER IF EXISTS set_credentials_timestamp ON public.credentials;
      CREATE TRIGGER set_credentials_timestamp
      BEFORE UPDATE ON public.credentials
      FOR EACH ROW
      EXECUTE FUNCTION public.trigger_set_timestamp();
    `;
    console.log("Attempting to create/update trigger for credentials table...");
    const { error: createCredentialsTriggerError } = await supabase.rpc("execute_sql_statement", { sql_query: createCredentialsTriggerSql });
    if (createCredentialsTriggerError) {
      console.error("Error creating trigger for credentials table:", createCredentialsTriggerError.message);
      console.warn("Please ensure the RPC function 'execute_sql_statement(sql_query TEXT)' exists in your Supabase project.");
    } else {
      console.log("Trigger for credentials table updated_at created or updated.");
    }

    console.log("Database setup script finished.");
  } catch (error) {
    console.error("Error during database setup:", error);
  }
}

setupDatabase();

