# UltraMCP ContextBuilderAgent 2.0 - Monitoring Stack
# Prometheus + Grafana + Alertmanager + Exporters

version: '3.8'

services:
  # Prometheus Time Series Database
  prometheus:
    image: prom/prometheus:latest
    container_name: contextbuilder-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=info'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.contextbuilder.service=prometheus"
      - "com.contextbuilder.version=2.0"

  # Grafana Visualization Platform
  grafana:
    image: grafana/grafana:latest
    container_name: contextbuilder-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - monitoring-network
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=contextbuilder_grafana_2024
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=localhost
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=localhost:587
      - GF_SMTP_USER=grafana@contextbuilder.local
      - GF_SMTP_PASSWORD=grafana_smtp_2024
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel
      - GF_ALERTING_ENABLED=true
      - GF_UNIFIED_ALERTING_ENABLED=true
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.contextbuilder.service=grafana"
      - "com.contextbuilder.version=2.0"

  # Alertmanager for Alert Management
  alertmanager:
    image: prom/alertmanager:latest
    container_name: contextbuilder-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - ./templates:/etc/alertmanager/templates:ro
      - alertmanager_data:/alertmanager
    networks:
      - monitoring-network
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--log.level=info'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.contextbuilder.service=alertmanager"
      - "com.contextbuilder.version=2.0"

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: contextbuilder-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - monitoring-network
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.systemd'
      - '--collector.processes'
    labels:
      - "com.contextbuilder.service=node-exporter"
      - "com.contextbuilder.version=2.0"

  # cAdvisor for Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: contextbuilder-cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - monitoring-network
    privileged: true
    devices:
      - /dev/kmsg
    labels:
      - "com.contextbuilder.service=cadvisor"
      - "com.contextbuilder.version=2.0"

  # Blackbox Exporter for Service Health Monitoring
  blackbox-exporter:
    image: prom/blackbox-exporter:latest
    container_name: contextbuilder-blackbox-exporter
    restart: unless-stopped
    ports:
      - "9115:9115"
    volumes:
      - ./blackbox.yml:/etc/blackbox_exporter/config.yml:ro
    networks:
      - monitoring-network
    command:
      - '--config.file=/etc/blackbox_exporter/config.yml'
      - '--log.level=info'
    labels:
      - "com.contextbuilder.service=blackbox-exporter"
      - "com.contextbuilder.version=2.0"

  # Nginx Exporter for Load Balancer Metrics
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: contextbuilder-nginx-exporter
    restart: unless-stopped
    ports:
      - "9113:9113"
    networks:
      - monitoring-network
    command:
      - '-nginx.scrape-uri=http://host.docker.internal:8080/nginx_status'
    labels:
      - "com.contextbuilder.service=nginx-exporter"
      - "com.contextbuilder.version=2.0"

  # Loki for Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: contextbuilder-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - monitoring-network
    command:
      - '-config.file=/etc/loki/local-config.yaml'
    labels:
      - "com.contextbuilder.service=loki"
      - "com.contextbuilder.version=2.0"

  # Promtail for Log Collection
  promtail:
    image: grafana/promtail:latest
    container_name: contextbuilder-promtail
    restart: unless-stopped
    volumes:
      - ./promtail.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - monitoring-network
    command:
      - '-config.file=/etc/promtail/config.yml'
    depends_on:
      - loki
    labels:
      - "com.contextbuilder.service=promtail"
      - "com.contextbuilder.version=2.0"

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: contextbuilder-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - monitoring-network
    labels:
      - "com.contextbuilder.service=jaeger"
      - "com.contextbuilder.version=2.0"

  # Custom Metrics Collector for ContextBuilderAgent
  contextbuilder-metrics-collector:
    image: python:3.11-alpine
    container_name: contextbuilder-metrics-collector
    restart: unless-stopped
    volumes:
      - ./collector:/app
    networks:
      - monitoring-network
    working_dir: /app
    command: >
      sh -c "
        pip install prometheus_client requests redis psycopg2-binary &&
        python metrics_collector.py
      "
    environment:
      - REDIS_URL=redis://host.docker.internal:6379
      - POSTGRES_URL=postgresql://contextbuilder:contextbuilder_secure_2024@host.docker.internal:5432/contextbuilder
      - PROMETHEUS_PORT=8000
    ports:
      - "8000:8000"
    labels:
      - "com.contextbuilder.service=metrics-collector"
      - "com.contextbuilder.version=2.0"

networks:
  monitoring-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16

volumes:
  prometheus_data:
  grafana_data:
  alertmanager_data:
  loki_data: