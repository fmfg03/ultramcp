# UltraMCP ContextBuilderAgent 2.0 - Database Services
# Production-Ready PostgreSQL + Redis Integration

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: contextbuilder-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=contextbuilder
      - POSTGRES_USER=contextbuilder
      - POSTGRES_PASSWORD=contextbuilder_secure_2024
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./backup:/backup
      - ./logs:/var/log/postgresql
    networks:
      - contextbuilder-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U contextbuilder -d contextbuilder"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_worker_processes=8
      -c max_parallel_workers_per_gather=4
      -c max_parallel_workers=8
      -c max_parallel_maintenance_workers=4
      -c log_destination=stderr
      -c log_statement=all
      -c log_min_duration_statement=1000
      -c log_checkpoints=on
      -c log_connections=on
      -c log_disconnections=on
      -c log_lock_waits=on
      -c log_temp_files=0
      -c log_autovacuum_min_duration=0
      -c log_error_verbosity=default
    labels:
      - "com.contextbuilder.service=postgres"
      - "com.contextbuilder.version=2.0"

  # Redis Cache and Stream Server
  redis:
    image: redis:7-alpine
    container_name: contextbuilder-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
      - ./logs:/var/log/redis
    networks:
      - contextbuilder-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: redis-server /usr/local/etc/redis/redis.conf
    labels:
      - "com.contextbuilder.service=redis"
      - "com.contextbuilder.version=2.0"

  # Redis Sentinel for High Availability
  redis-sentinel:
    image: redis:7-alpine
    container_name: contextbuilder-redis-sentinel
    restart: unless-stopped
    ports:
      - "26379:26379"
    volumes:
      - sentinel_data:/data
      - ./sentinel.conf:/usr/local/etc/redis/sentinel.conf
    networks:
      - contextbuilder-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "26379", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: redis-sentinel /usr/local/etc/redis/sentinel.conf
    labels:
      - "com.contextbuilder.service=redis-sentinel"
      - "com.contextbuilder.version=2.0"

  # PgAdmin for Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: contextbuilder-pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@contextbuilder.local
      - PGADMIN_DEFAULT_PASSWORD=contextbuilder_admin_2024
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - contextbuilder-network
    depends_on:
      - postgres
    labels:
      - "com.contextbuilder.service=pgadmin"
      - "com.contextbuilder.version=2.0"

  # Redis Commander for Redis Management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: contextbuilder-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
      - REDIS_PASSWORD=contextbuilder_redis_2024
    ports:
      - "8081:8081"
    networks:
      - contextbuilder-network
    depends_on:
      - redis
    labels:
      - "com.contextbuilder.service=redis-commander"
      - "com.contextbuilder.version=2.0"

  # Database Backup Service
  db-backup:
    image: postgres:15-alpine
    container_name: contextbuilder-db-backup
    restart: unless-stopped
    environment:
      - POSTGRES_DB=contextbuilder
      - POSTGRES_USER=contextbuilder
      - POSTGRES_PASSWORD=contextbuilder_secure_2024
      - BACKUP_SCHEDULE=0 2 * * *
    volumes:
      - ./backup:/backup
      - ./scripts/backup.sh:/backup.sh
    networks:
      - contextbuilder-network
    depends_on:
      - postgres
    command: >
      sh -c "
        echo '#!/bin/sh' > /backup.sh
        echo 'pg_dump -h postgres -U contextbuilder -d contextbuilder > /backup/contextbuilder_\$$(date +%Y%m%d_%H%M%S).sql' >> /backup.sh
        echo 'find /backup -name \"*.sql\" -mtime +7 -delete' >> /backup.sh
        chmod +x /backup.sh
        crond -f -l 2
      "
    labels:
      - "com.contextbuilder.service=db-backup"
      - "com.contextbuilder.version=2.0"

  # Database Monitoring with Postgres Exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: contextbuilder-postgres-exporter
    restart: unless-stopped
    environment:
      - DATA_SOURCE_NAME=postgresql://contextbuilder:contextbuilder_secure_2024@postgres:5432/contextbuilder?sslmode=disable
    ports:
      - "9187:9187"
    networks:
      - contextbuilder-network
    depends_on:
      - postgres
    labels:
      - "com.contextbuilder.service=postgres-exporter"
      - "com.contextbuilder.version=2.0"

  # Redis Monitoring with Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: contextbuilder-redis-exporter
    restart: unless-stopped
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=contextbuilder_redis_2024
    ports:
      - "9121:9121"
    networks:
      - contextbuilder-network
    depends_on:
      - redis
    labels:
      - "com.contextbuilder.service=redis-exporter"
      - "com.contextbuilder.version=2.0"

  # Connection Pooler with PgBouncer
  pgbouncer:
    image: pgbouncer/pgbouncer:latest
    container_name: contextbuilder-pgbouncer
    restart: unless-stopped
    environment:
      - DATABASES_HOST=postgres
      - DATABASES_PORT=5432
      - DATABASES_USER=contextbuilder
      - DATABASES_PASSWORD=contextbuilder_secure_2024
      - DATABASES_DBNAME=contextbuilder
      - POOL_MODE=transaction
      - SERVER_RESET_QUERY=DISCARD ALL
      - MAX_CLIENT_CONN=200
      - DEFAULT_POOL_SIZE=25
      - MIN_POOL_SIZE=5
      - RESERVE_POOL_SIZE=5
      - RESERVE_POOL_TIMEOUT=5
      - MAX_DB_CONNECTIONS=50
      - MAX_USER_CONNECTIONS=50
      - SERVER_ROUND_ROBIN=1
      - LOG_CONNECTIONS=1
      - LOG_DISCONNECTIONS=1
      - LOG_POOLER_ERRORS=1
      - STATS_PERIOD=60
      - ADMIN_USERS=contextbuilder
    ports:
      - "6432:6432"
    networks:
      - contextbuilder-network
    depends_on:
      - postgres
    labels:
      - "com.contextbuilder.service=pgbouncer"
      - "com.contextbuilder.version=2.0"

networks:
  contextbuilder-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  sentinel_data:
    driver: local
  pgadmin_data:
    driver: local