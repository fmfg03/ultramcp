# UltraMCP ContextBuilderAgent 2.0 - Database Deployments
# Kubernetes Deployments for PostgreSQL and Redis

---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: contextbuilder
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: "15"
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: contextbuilder
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: "15"
        app.kubernetes.io/component: database
        app.kubernetes.io/part-of: contextbuilder
    spec:
      containers:
        - name: postgresql
          image: postgres:15-alpine
          ports:
            - containerPort: 5432
              name: postgres
          env:
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: database-secrets
                  key: postgres-database
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: database-secrets
                  key: postgres-user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: database-secrets
                  key: postgres-password
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
            - name: postgres-config
              mountPath: /etc/postgresql/postgresql.conf
              subPath: postgresql.conf
            - name: postgres-config
              mountPath: /etc/postgresql/pg_hba.conf
              subPath: pg_hba.conf
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "2Gi"
              cpu: "1000m"
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - contextbuilder
                - -d
                - contextbuilder
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - contextbuilder
                - -d
                - contextbuilder
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 3
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
        - name: postgres-config
          configMap:
            name: postgres-config

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: contextbuilder
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: "7"
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: contextbuilder
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: "7"
        app.kubernetes.io/component: database
        app.kubernetes.io/part-of: contextbuilder
    spec:
      containers:
        - name: redis
          image: redis:7-alpine
          ports:
            - containerPort: 6379
              name: redis
          command:
            - redis-server
            - /usr/local/etc/redis/redis.conf
          volumeMounts:
            - name: redis-storage
              mountPath: /data
            - name: redis-config
              mountPath: /usr/local/etc/redis/redis.conf
              subPath: redis.conf
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "2Gi"
              cpu: "500m"
          livenessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 3
      volumes:
        - name: redis-storage
          persistentVolumeClaim:
            claimName: redis-pvc
        - name: redis-config
          configMap:
            name: redis-config

---
# PgBouncer Deployment (Connection Pooler)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgbouncer
  namespace: contextbuilder
  labels:
    app.kubernetes.io/name: pgbouncer
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: contextbuilder
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: pgbouncer
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pgbouncer
        app.kubernetes.io/component: database
        app.kubernetes.io/part-of: contextbuilder
    spec:
      containers:
        - name: pgbouncer
          image: pgbouncer/pgbouncer:latest
          ports:
            - containerPort: 6432
              name: pgbouncer
          env:
            - name: DATABASES_HOST
              value: postgres
            - name: DATABASES_PORT
              value: "5432"
            - name: DATABASES_USER
              valueFrom:
                secretKeyRef:
                  name: database-secrets
                  key: postgres-user
            - name: DATABASES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: database-secrets
                  key: postgres-password
            - name: DATABASES_DBNAME
              valueFrom:
                secretKeyRef:
                  name: database-secrets
                  key: postgres-database
            - name: POOL_MODE
              value: transaction
            - name: MAX_CLIENT_CONN
              value: "200"
            - name: DEFAULT_POOL_SIZE
              value: "25"
            - name: MIN_POOL_SIZE
              value: "5"
            - name: RESERVE_POOL_SIZE
              value: "5"
            - name: MAX_DB_CONNECTIONS
              value: "50"
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
          livenessProbe:
            tcpSocket:
              port: 6432
            initialDelaySeconds: 30
            periodSeconds: 30
          readinessProbe:
            tcpSocket:
              port: 6432
            initialDelaySeconds: 5
            periodSeconds: 10