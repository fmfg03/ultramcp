# UltraMCP ContextBuilderAgent 2.0 - Monitoring Deployments
# Kubernetes Deployments for Prometheus, Grafana, and monitoring stack

---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: contextbuilder
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: contextbuilder
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/component: monitoring
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
        app.kubernetes.io/version: "latest"
        app.kubernetes.io/component: monitoring
        app.kubernetes.io/part-of: contextbuilder
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:latest
          ports:
            - containerPort: 9090
              name: web
          args:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--storage.tsdb.retention.time=30d'
            - '--storage.tsdb.retention.size=10GB'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--web.enable-lifecycle'
            - '--web.enable-admin-api'
            - '--log.level=info'
          volumeMounts:
            - name: prometheus-storage
              mountPath: /prometheus
            - name: prometheus-config
              mountPath: /etc/prometheus/prometheus.yml
              subPath: prometheus.yml
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "4Gi"
              cpu: "2000m"
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 30
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 10
            periodSeconds: 10
      volumes:
        - name: prometheus-storage
          persistentVolumeClaim:
            claimName: prometheus-pvc
        - name: prometheus-config
          configMap:
            name: prometheus-config

---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: contextbuilder
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: contextbuilder
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/component: monitoring
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/version: "latest"
        app.kubernetes.io/component: monitoring
        app.kubernetes.io/part-of: contextbuilder
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:latest
          ports:
            - containerPort: 3000
              name: web
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: monitoring-secrets
                  key: grafana-admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: monitoring-secrets
                  key: grafana-admin-password
            - name: GF_USERS_ALLOW_SIGN_UP
              value: "false"
            - name: GF_SERVER_DOMAIN
              value: "grafana.contextbuilder.local"
            - name: GF_INSTALL_PLUGINS
              value: "grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel"
            - name: GF_ALERTING_ENABLED
              value: "true"
            - name: GF_UNIFIED_ALERTING_ENABLED
              value: "true"
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 10
            periodSeconds: 10
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-pvc

---
# Alertmanager Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager
  namespace: contextbuilder
  labels:
    app.kubernetes.io/name: alertmanager
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: contextbuilder
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: alertmanager
      app.kubernetes.io/component: monitoring
  template:
    metadata:
      labels:
        app.kubernetes.io/name: alertmanager
        app.kubernetes.io/version: "latest"
        app.kubernetes.io/component: monitoring
        app.kubernetes.io/part-of: contextbuilder
    spec:
      containers:
        - name: alertmanager
          image: prom/alertmanager:latest
          ports:
            - containerPort: 9093
              name: web
          args:
            - '--config.file=/etc/alertmanager/alertmanager.yml'
            - '--storage.path=/alertmanager'
            - '--web.external-url=http://alertmanager.contextbuilder.local:9093'
            - '--log.level=info'
          volumeMounts:
            - name: alertmanager-config
              mountPath: /etc/alertmanager/alertmanager.yml
              subPath: alertmanager.yml
          resources:
            requests:
              memory: "128Mi"
              cpu: "50m"
            limits:
              memory: "256Mi"
              cpu: "100m"
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9093
            initialDelaySeconds: 30
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9093
            initialDelaySeconds: 10
            periodSeconds: 10
      volumes:
        - name: alertmanager-config
          configMap:
            name: alertmanager-config

---
# Node Exporter DaemonSet
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: node-exporter
  namespace: contextbuilder
  labels:
    app.kubernetes.io/name: node-exporter
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: contextbuilder
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: node-exporter
      app.kubernetes.io/component: monitoring
  template:
    metadata:
      labels:
        app.kubernetes.io/name: node-exporter
        app.kubernetes.io/version: "latest"
        app.kubernetes.io/component: monitoring
        app.kubernetes.io/part-of: contextbuilder
    spec:
      hostNetwork: true
      hostPID: true
      containers:
        - name: node-exporter
          image: prom/node-exporter:latest
          ports:
            - containerPort: 9100
              name: metrics
          args:
            - '--path.procfs=/host/proc'
            - '--path.sysfs=/host/sys'
            - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
            - '--collector.systemd'
            - '--collector.processes'
          volumeMounts:
            - name: proc
              mountPath: /host/proc
              readOnly: true
            - name: sys
              mountPath: /host/sys
              readOnly: true
            - name: rootfs
              mountPath: /rootfs
              readOnly: true
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
      volumes:
        - name: proc
          hostPath:
            path: /proc
        - name: sys
          hostPath:
            path: /sys
        - name: rootfs
          hostPath:
            path: /
      tolerations:
        - effect: NoSchedule
          operator: Exists

---
# Custom Metrics Collector Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: metrics-collector
  namespace: contextbuilder
  labels:
    app.kubernetes.io/name: metrics-collector
    app.kubernetes.io/version: "2.0"
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: contextbuilder
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: metrics-collector
      app.kubernetes.io/component: monitoring
  template:
    metadata:
      labels:
        app.kubernetes.io/name: metrics-collector
        app.kubernetes.io/version: "2.0"
        app.kubernetes.io/component: monitoring
        app.kubernetes.io/part-of: contextbuilder
    spec:
      containers:
        - name: metrics-collector
          image: python:3.11-alpine
          ports:
            - containerPort: 8000
              name: metrics
          command:
            - sh
            - -c
            - |
              pip install prometheus_client requests redis psycopg2-binary &&
              python /app/metrics_collector.py
          env:
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: database-secrets
                  key: redis-url
            - name: POSTGRES_URL
              valueFrom:
                secretKeyRef:
                  name: database-secrets
                  key: postgres-url
            - name: PROMETHEUS_PORT
              value: "8000"
            - name: COLLECTION_INTERVAL
              value: "30"
          volumeMounts:
            - name: metrics-collector-code
              mountPath: /app
          resources:
            requests:
              memory: "128Mi"
              cpu: "50m"
            limits:
              memory: "256Mi"
              cpu: "100m"
          livenessProbe:
            httpGet:
              path: /metrics
              port: 8000
            initialDelaySeconds: 30
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /metrics
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 10
      volumes:
        - name: metrics-collector-code
          configMap:
            name: metrics-collector-code