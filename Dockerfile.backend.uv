# SuperMCP Backend Dockerfile with UV Integration
# Optimized for fast, reproducible Python dependencies

# Stage 1: Python Dependencies with UV
FROM python:3.11-slim AS python-deps

# Install system dependencies and uv
RUN apt-get update && apt-get install -y \
    curl \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Install uv
RUN curl -LsSf https://astral.sh/uv/install.sh | sh
ENV PATH="/root/.local/bin:$PATH"

WORKDIR /app

# Copy Python requirements
COPY requirements.txt uv.lock ./
COPY pyproject.toml ./

# Install Python dependencies with uv (8-10x faster than pip)
RUN uv pip install --system -r uv.lock

# Stage 2: Node.js Dependencies  
FROM node:20-alpine AS node-deps
WORKDIR /app

# Copy package files
COPY apps/backend/package*.json ./
COPY apps/backend/pnpm-lock.yaml* ./

# Install Node.js dependencies
RUN npm install -g pnpm
RUN pnpm install --frozen-lockfile

# Stage 3: Production
FROM python:3.11-slim AS production

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    nodejs \
    npm \
    && rm -rf /var/lib/apt/lists/*

# Install uv for runtime
RUN curl -LsSf https://astral.sh/uv/install.sh | sh
ENV PATH="/root/.local/bin:$PATH"

# Create app user
RUN groupadd -r mcp && useradd -r -g mcp mcp

WORKDIR /app

# Copy Python dependencies from python-deps stage
COPY --from=python-deps /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=python-deps /usr/local/bin /usr/local/bin

# Copy Node.js dependencies
COPY --from=node-deps /app/node_modules ./apps/backend/node_modules

# Copy application code
COPY --chown=mcp:mcp . ./

# Install PM2 globally
RUN npm install -g pm2

# Create necessary directories
RUN mkdir -p logs keys uploads temp data/state
RUN chown -R mcp:mcp logs keys uploads temp data

# Copy uv configuration for runtime dependency management
COPY uv.lock pyproject.toml ./
COPY requirements.txt ./

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Switch to non-root user
USER mcp

# Expose ports
EXPOSE 3000 8000 5000

# Environment variables
ENV PYTHONPATH=/app
ENV NODE_ENV=production
ENV PYTHON_ENV=production

# Start script that manages both Node.js and Python services
COPY --chown=mcp:mcp scripts/start_system.sh ./start_system.sh
RUN chmod +x ./start_system.sh

CMD ["./start_system.sh"]